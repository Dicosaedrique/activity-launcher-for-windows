@using System.Management.Automation;
@using FastWorkspace.Domain.Common;
@using FastWorkspace.Domain.Jobs;

@inject IWorkspaceStore WorkspaceStore
@inject IAppConfiguration AppConfiguration

@attribute [Route(Routes.HomePage)]

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-8">Welcome to Fast Workspace!</MudText>

<div>
    <div class="mb-6" style="width: 25%">
        <MudText Typo="Typo.h5">Data storage path</MudText>
        <MudText Typo="Typo.body1"><b>Hint:</b> C:\Users\aboua\Downloads\demo</MudText>
        <MudTextField Value="AppConfiguration.GetFileStorageDirectoryPath()" ValueChanged="EventCallback.Factory.Create<string?>(this, OnFileStorageDirectoryPathChanged)" Variant="Variant.Outlined"></MudTextField>
    </div>

    @if (AppReady)
    {
        <div class="mb-6 mx-auto" style="width: 100%">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudButton OnClick="Refresh">Refresh</MudButton>
                <MudButton OnClick="CreateWorkspace">Create workspace</MudButton>
                <MudButton OnClick="ExecuteScript">Execute script</MudButton>
            </MudButtonGroup>
        </div>
        
        <div class="mb-6">
            <MudText Typo="Typo.h5">Workspaces</MudText>
            @if (_workspaces != null && _workspaces.Any())
            {
                <MudList Clickable>
                    @foreach (var workspace in _workspaces)
                    {
                        <MudListItem OnClick="args => SetScript(workspace)" Text="@workspace.Name" />
                    }
                </MudList>
            }
            else
            {
                <MudText Typo="Typo.body1">No workspaces found!</MudText>
            }
        </div>

        <div class="mb-4">
            <MudText Typo="Typo.h5">Script</MudText>
            <MudText Typo="Typo.body1">
                @if (string.IsNullOrEmpty(_script))
                {
                    @("Please select a script")
                }
                else
                {
                    @(new MarkupString(_script.Replace("\n", "<br />")))
                }
            </MudText>
        </div>
    }
    @if (!string.IsNullOrEmpty(_errors))
    {
        <div>
            <MudText Typo="Typo.h5">Errors</MudText>
            <MudText Typo="Typo.body1" Class="red-text">@(new MarkupString(_errors))</MudText>
        </div>
    }
</div>

@code {
    private IEnumerable<Workspace>? _workspaces;

    private string? _errors;
    private string? _script;

    private bool AppReady => AppConfiguration.IsAppReady();

    protected override Task OnInitializedAsync()
    {
        return Refresh();
    }

    private async Task Refresh()
    {
        if(AppReady)
        {
            var result = await WorkspaceStore.GetAllAsync();
            _workspaces = result.Content;
        }
    }

    private async Task OnFileStorageDirectoryPathChanged(string? value)
    {
        if (AppConfiguration.SetFileStorageDirectoryPath(value))
        {
            WorkspaceStore.SetupStore();
            _errors = null;
            await Refresh();
        }
        else
        {
            _errors = "You must provide an existing path to setup storage for the application!";
        }
    }

    private async Task CreateWorkspace()
    {
        var workspace = new Workspace()
        {
            Name = $"Demo {_workspaces!.Count() + 1}",
            Description = "A nice script that does a lot of things",
            Enabled = true,
        };

        workspace.AddJob(new BrowserTabsJob()
        {
            Name = "Open browser",
            Description = "Open all my favorite tabs",
            Enabled = true,
        });

        workspace.AddJob(new ExplorerFolderJob()
        {
            Name = "Project",
            Description = "Open project directory",
            DirectoryPath = "C:\\Users\\aboua\\Downloads\\temp",
            Enabled = true,
        });

        workspace.AddJob(new ProgramFileJob()
        {
            Name = "Open Teams",
            ProgramFilePath = "C:\\Users\\AntoineBouabana\\AppData\\Local\\Microsoft\\Teams\\Update.exe",
            ArgumentList = "--processStart Teams.exe",
            Enabled = true,
        });

        workspace.AddJob(new ProgramJob()
        {
            Name = "Open NotePad ++",
            ProgramName = "notepad++",
            Enabled = true,
        });

        workspace.AddJob(new ScriptJob()
        {
            Name = "Custom script",
            Script="# A little script (test)",
            Enabled = true,
        });

        workspace.AddJob(new TerminalJob()
        {
            TerminalTab = new TerminalTab(),
            Enabled = true,
        });

        workspace.AddJob(new TerminalTabsJob()
        {
            Description = "Open multiple terminal tabs let's gooo!!!!",
            TerminalTabs = new List<TerminalTab>()
            {
                new TerminalTab()
                {
                    Title = "Ls master",
                    Command = "ls",
                    LocationPath = "C:\\Users\\aboua\\Git\\fast-workspace",
                    Color = "#eb4034",
                },
                new TerminalTab()
                {
                    Title = "Something else",
                    Color = "#e813cc",
                },
            },
            Enabled = true,
        });

        workspace.AddJob(new VSCodeJob()
        {
            DirectoryPath = "C:\\Users\\aboua\\Git\\fast-workspace",
            Enabled = true,
        });

        workspace.AddJob(new VSSolutionJob()
        {
            Name = "Open solution project (client)",
            SolutionFilePath = "C:\\Users\\aboua\\Git\\fast-workspace\\Solution\\FastWorkspace.sln",
            Enabled = true,
        });

        await WorkspaceStore.AddOrUpdateAsync(workspace);
        await Refresh();
    }

    private void SetScript(Workspace workspace)
    {
        _script = workspace.GetScript();
    }

    private void ExecuteScript()
    {
        if(!string.IsNullOrWhiteSpace(_script))
        {
            var powershell = PowerShell.Create().AddScript(_script);
            var scriptResult = powershell.Invoke();
            _errors = string.Join("<br />", powershell.Streams.Error.Select(x => x.ToString()));
        }
    }
}



    