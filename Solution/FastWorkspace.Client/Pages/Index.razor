@using System.Diagnostics;
@using System.Management.Automation;
@using FastWorkspace.Domain.Jobs;

@inject IWorkspaceStore WorkspaceStore

@attribute [Route(Routes.HomePage)]

<MudText Typo="Typo.h2" Class="mb-8">Welcome to Fast Workspace!</MudText>

<article class="mx-16">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" Class="mb-6">
        <MudButton OnClick="Refresh">Refresh</MudButton>
        <MudButton OnClick="CreateAndSaveWorkspace">Create and save workspace</MudButton>
        <MudButton OnClick="ExecuteScript">Execute script</MudButton>
    </MudButtonGroup>

    <div class="mb-6">
        <MudText Typo="Typo.h5">Workspaces</MudText>
        @if (_workspaces != null)
        {
            <MudList Clickable>
                @foreach (var workspace in _workspaces)
                {
                    <MudListItem OnClick="args => SetScript(workspace)" Text="@workspace.Name" />
                }
            </MudList>
        }
    </div>
    
    <div class="mb-4">
        <MudText Typo="Typo.h5">Script</MudText>
        <MudText Typo="Typo.body1">
            @if (string.IsNullOrEmpty(_script))
            {
                @("Please select a script")
            }
            else
            {
                @(new MarkupString(_script.Replace("\n", "<br />")))
            }
        </MudText>
    </div>

    <div class="mb-4">
        <MudText Typo="Typo.h5">Errors</MudText>
        <MudText Typo="Typo.body1">@(string.IsNullOrEmpty(_errors) ? "No errors" : _errors)</MudText>
    </div>
</article>

    @code {
    private IEnumerable<Workspace> _workspaces = null;

    private string _errors;
    private string _script;

    protected override Task OnInitializedAsync()
    {
        return Refresh();
    }

    private async Task Refresh()
    {
        var result = await WorkspaceStore.GetAllAsync(true);
        _workspaces = result.Content;
        _script = null;
    }

    private async Task CreateAndSaveWorkspace()
    {
        var workspace = new Workspace()
        {
            Name = $"Demo {_workspaces.Count() + 1}",
            Description = "Test for the first time!",
            Enabled = true,
        };

        workspace.AddJob(new ExplorerFolderJob()
        {
            Name = "Project",
            Description = "Open project directory",
            FolderPath = "C:\\Users\\aboua\\Downloads\\temp",
            Enabled = true,
        });

        await WorkspaceStore.AddOrUpdateAsync(workspace); // todo: ajouter les entités au store
        await Refresh();
    }

    private void SetScript(Workspace workspace)
    {
        _script = workspace.GetScript();
    }

    private void ExecuteScript()
    {
        if(!string.IsNullOrWhiteSpace(_script))
        {
            var powershell = PowerShell.Create().AddScript(_script);
            var scriptResult = powershell.Invoke();
            _errors = string.Join(" | ", powershell.Streams.Error.Select(x => x.ToString()));
        }
    }
}



    