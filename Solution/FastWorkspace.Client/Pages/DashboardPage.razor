@using FastWorkspace.Domain.Common;

@implements IDisposable

@attribute [Route(Routes.DashboardPage)]

@inject WorkspaceController WorkspaceController
@inject IStringLocalizer<AppLocales> Localize

<MudContainer MaxWidth="MaxWidth.Large">
    <MudStack Row Justify="Justify.SpaceBetween" Class="mb-14">
        <div>
            <MudText Typo="Typo.h4" Class="mb-4">@Localize["Dashboard.Title"]</MudText>
            <MudText Typo="Typo.subtitle1">@Localize["Dashboard.Description"]</MudText>
        </div>
        <div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateWorkspaceDialog">@Localize["Dashboard.CreateWorkspaceButton"]</MudButton>
        </div>
    </MudStack>

    @if (_workspaces != null)
    {
        <div Class="d-flex flex-wrap gap-4 mx-n2 mb-16">
            @foreach (var workspace in _workspaces.OrderBy(x => x.LastModifiedDate))
            {
                <WorkspaceCard @key="workspace.Id" Workspace="workspace" />
            }
        </div>
    }
</MudContainer>

@code {
    private IEnumerable<Workspace>? _workspaces;

    protected override async Task OnInitializedAsync()
    {
        WorkspaceController.AddWorkspaceChangedListener(GetWorkspaces);
        await GetWorkspaces();
    }

    private async Task GetWorkspaces()
    {
        _workspaces = await WorkspaceController.GetWorkspaces();
        StateHasChanged();
    }

    private void OpenCreateWorkspaceDialog()
    {
        WorkspaceController.OpenCreateWorkspaceDialog();
    }

    public void Dispose()
    {
        WorkspaceController.RemoveWorkspaceChangedListener(GetWorkspaces);
    }
}



    