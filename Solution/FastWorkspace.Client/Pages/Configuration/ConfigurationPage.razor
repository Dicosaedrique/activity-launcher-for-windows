@using System.Globalization;
@using FastWorkspace.Client.Common.Theming;
@using FastWorkspace.Client.Common.Utils;
@using FastWorkspace.Domain.Common.Localization;

@implements IAsyncDisposable

@inject IWorkspaceStore WorkspaceStore
@inject IAppConfiguration AppConfiguration
@inject NavigationManager Navigation
@inject IStringLocalizer<ConfigurationPageLocales> Localize
@inject ApplicationEventManager EventManager

@attribute [Route(Routes.ConfigurationPage)]

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" Class="mb-8">@Localize["Title"]</MudText>

    @if (!AppConfiguration.IsAppReady())
    {
        <MudText Typo="Typo.subtitle1" Class="mb-8">@Localize["WelcomeMessage"]</MudText>
    }

    <MudStack Spacing="8">
        <div>
            <MudText Typo="Typo.h6">@Localize["Language.Label"]</MudText>
            <MudRadioGroup T="Language" SelectedOption="_language" SelectedOptionChanged="LanguageChange">
                <MudRadio Option="Language.English" Color="Color.Primary">@Localize["Language.English"]</MudRadio>
                <MudRadio Option="Language.French" Color="Color.Primary">@Localize["Language.French"]</MudRadio>
            </MudRadioGroup>
        </div>
        <div>
            <MudText Typo="Typo.h6">@Localize["Theme.Label"]</MudText>
            <MudRadioGroup T="Theme" SelectedOption="_theme" SelectedOptionChanged="ThemeChange">
                <MudRadio Option="Theme.Light" Color="Color.Primary">@Localize["Theme.Light"]</MudRadio>
                <MudRadio Option="Theme.Dark" Color="Color.Primary">@Localize["Theme.Dark"]</MudRadio>
            </MudRadioGroup>
        </div>
        <div>
            <MudText Typo="Typo.h6" Class="mb-2">@Localize["FileStorage.Label"]</MudText>
            <MudText Typo="Typo.body1" Class="mb-4">@Localize["FileStorage.Help"]</MudText>
            <FolderPickerInput Label="@Localize["FileStorage.FolderPicker.Label"]" @bind-FolderPath="_fileStorageDirectoryPath" />
        </div>
        <div class="mt-16">
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Reset" Class="mr-4">@Localize["ResetButton"]</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="string.IsNullOrWhiteSpace(_fileStorageDirectoryPath)" OnClick="Save">@Localize["SaveButton"]</MudButton>
            <ErrorText Error="@_error" />
        </div>
    </MudStack>
</MudContainer>

@code {
    [CascadingParameter]
    public ValueHolder<ThemeSettings> ThemeSettingValueHolder { get; set; } = null!;

    private Language _language;
    private Theme _theme;
    private string? _fileStorageDirectoryPath;

    private string? _error;

    protected override void OnInitialized()
    {
        _language = AppConfiguration.GetLanguage();
        _theme = AppConfiguration.GetTheme();
        _fileStorageDirectoryPath = AppConfiguration.GetFileStorageDirectoryPath();
    }

    private void LanguageChange(Language language)
    {
        _language = language;

        CultureInfo.CurrentCulture = _language.GetCulture();
        CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CurrentCulture;
        CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.CurrentCulture;
    }

    private async Task ThemeChange(Theme theme)
    {
        _theme = theme;
        await ThemeSettingValueHolder.SetValue(new ThemeSettings(ThemeSettingValueHolder.Value.Theme, _theme == Theme.Dark));
    }

    private void Save()
    {
        if (string.IsNullOrWhiteSpace(_fileStorageDirectoryPath))
        {
            _error = Localize["Errors.EmptyFileStorage"];
        }

        if (AppConfiguration.SetFileStorageDirectoryPath(_fileStorageDirectoryPath))
        {
            WorkspaceStore.SetupStore();
            AppConfiguration.SetLanguage(_language);
            AppConfiguration.SetTheme(_theme);
            Navigation.NavigateTo(Routes.DashboardPage, replace: true);
        }
        else
        {
            _error = Localize["Errors.InvalidFileStorage"];
        }
    }

    private void Reset()
    {
        AppConfiguration.Reset();
        Navigation.NavigateTo(Routes.Index, forceLoad: true, replace: true);
    }

    public async ValueTask DisposeAsync()
    {
        var savedLanguage = AppConfiguration.GetLanguage();

        if (savedLanguage != _language)
        {
            LanguageChange(savedLanguage);
        }

        var savedTheme = AppConfiguration.GetTheme();

        if (savedTheme != _theme)
        {
            await ThemeChange(savedTheme);
        }
    }
}



