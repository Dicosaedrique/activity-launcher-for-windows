@inject IStringLocalizer<ActivityLocales> Localize

@inject IStringLocalizer<ActivityLocales> Localize

<MudCard Outlined>
    <MudCardHeader onclick="@ToggleExpanded" Style="cursor: pointer;">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@InternalTitle</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@ExpansionIcon" Color="Color.Default" OnClick="ToggleExpanded" />
        </CardHeaderActions>
    </MudCardHeader>

    @if (_expanded)
    {
        <MudCardContent>
            <MudText Typo="Typo.subtitle1" Class="mb-4">@Description</MudText>
            <MudStack Spacing="4">
                @foreach (var task in Tasks)
                {
                    <TaskCard Task="task" EditMode="EditMode" OnRemove="GetOnRemoveCallback(task)" />
                }
            </MudStack>
        </MudCardContent>
    }
</MudCard>

@code {
    [Parameter]
    public Activity Activity { get; set; } = null!;

    [Parameter]
    public EventCallback<Activity> ActivityChanged { get; set; }

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Description { get; set; } = string.Empty;

    [Parameter]
    public IEnumerable<ITask> Tasks { get; set; } = null!;

    [Parameter]
    public bool EditMode { get; set; } = false;

    private bool _expanded = false;

    private void ToggleExpanded()
    {
        _expanded = !_expanded;
    }

    private string ExpansionIcon => _expanded ? @Icons.Material.Filled.Remove : @Icons.Material.Filled.Add;

    private string InternalTitle => $"{Title} ({Tasks.Count()})";

    private EventCallback GetOnRemoveCallback(ITask task)
    {
        return EventCallback.Factory.Create(this, async () =>
        {
            Activity.RemoveTask(task);
            await ActivityChanged.InvokeAsync(Activity);
        });
    }

    // todo: add icons there
}
