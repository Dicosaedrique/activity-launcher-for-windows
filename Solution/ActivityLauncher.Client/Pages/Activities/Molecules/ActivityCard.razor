@inject IStringLocalizer<ActivityLocales> Localize
@inject ActivityController ActivityController

<MudCard Elevation="_elevation" onclick="@Open" onmouseover="@MouseEnter" onmouseout="@MouseLeave" Style="cursor: pointer; width: 280px;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudStack Row AlignItems="AlignItems.Center">
                @if (Activity.LaunchAtStartup)
                {
                    <MudTooltip Text="@Localize["Activity.Card.LaunchAtStartupEnabledTooltip"]">
                        <MudIcon Icon="@Icons.Material.Filled.PowerSettingsNew" />
                    </MudTooltip>
                    <MudText Typo="Typo.h6" Style="font-size: 1.2rem; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; max-width: 165px;" title="@Activity.Name">@Activity.Name</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6" Style="font-size: 1.2rem; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; max-width: 190px;" title="@Activity.Name">@Activity.Name</MudText>
                }
            </MudStack>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (IsActivityValid)
            {
                <MudTooltip Text="@Localize["Activity.Card.LaunchActivityTooltip"]">
                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Large" Color="Color.Success" OnClick="LaunchActivity" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="@Localize.Pluralize("Activity.Card.InvalidTooltip", _invalidtaskCount)">
                    <MudIconButton Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Large" Color="Color.Error" OnClick="Edit" />
                </MudTooltip>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText Class="mb-2" Style="overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; height: 48px;" title="@Activity.Description">
            @if (!string.IsNullOrWhiteSpace(Activity.Description))
            {
                @Activity.Description
            }
            else
            {
                <span>&nbsp;</span><br /><span>&nbsp;</span>
            }
        </MudText>
    </MudCardContent>
    <MudCardActions>
        <MudText Typo="Typo.body2" Class="ml-2" Style="font-size: 0.7rem;">@_humanizedLastModifiedDate</MudText>
        <div style="flex: 1;" />
        <MudTooltip Text="@Localize["Activity.Card.EditButtonTooltip"]">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="Edit" />
        </MudTooltip>
        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
            @if (IsActivityValid)
            {
                <MudMenuItem Icon="@Icons.Material.Filled.Code" OnClick="OpenScript">@Localize["Activity.Card.OpenScriptMenu"]</MudMenuItem>
            }
            <MudMenuItem Icon="@Icons.Material.Filled.ContentCopy" OnClick="Duplicate">@Localize["Activity.Card.DuplicateMenu"]</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.PowerSettingsNew" OnClick="ToggleLaunchAtStartup">@Localize[Activity.LaunchAtStartup ? "Activity.Card.DisableLaunchAtStartupMenu" : "Activity.Card.EnableLaunchAtStartup"]</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Delete" OnClick="Delete">@Localize["Activity.Card.DeleteMenu"]</MudMenuItem>
        </MudMenu>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public Activity Activity { get; set; } = null!;

    private int _elevation = 2;

    private string _humanizedLastModifiedDate = string.Empty;

    private int _invalidtaskCount;

    private bool IsActivityValid => _invalidtaskCount == 0;

    protected override void OnParametersSet()
    {
        _humanizedLastModifiedDate = Activity.LastModifiedDate.Humanize();
        _invalidtaskCount = Activity.GetInvalidTaskCount();
    }

    private void MouseEnter()
    {
        _elevation = 12;
    }

    private void MouseLeave()
    {
        _elevation = 2;
    }

    private async Task LaunchActivity()
    {
        await ActivityController.PromptLaunchActivity(Activity, showReviewScriptOption: true);
    }

    private void Open()
    {
        ActivityController.OpenActivityDialog(Activity);
    }

    private void OpenScript()
    {
        ActivityController.OpenActivityScriptDialog(Activity);
    }

    private void Edit()
    {
        ActivityController.OpenEditActivityDialog(Activity);
    }

    private async Task Duplicate()
    {
        await ActivityController.DuplicateActivity(Activity);
    }

    private async Task Delete()
    {
        await ActivityController.PromptDeleteActivity(Activity);
    }

    private async Task ToggleLaunchAtStartup()
    {
        if (Activity.LaunchAtStartup)
        {
            await ActivityController.DisableLaunchAtStartup(Activity);
        }
        else
        {
            await ActivityController.PromptEnableLaunchAtStartup(Activity);
        }
    }
}
