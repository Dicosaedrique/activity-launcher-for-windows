@using ActivityLauncher.Client.Pages.Activities.Atoms;
@using ActivityLauncher.Client.Pages.Activities.Molecules;

@inject IStringLocalizer<ActivityLocales> Localize

<div class="@Class">
    <MudStack Class="mb-8" Row Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h5">@Localize["Activity.Dialog.Tasks.Title"]</MudText>
        @if (EditMode)
        {
            <AddTaskButton Activity="Activity" OnChange="TasksChanged" />
        }
    </MudStack>

    @if(_tasks.Any())
    {
        <MudStack Spacing="6">
            @foreach(var task in _tasks)
            {
                <TaskCard Task="task" EditMode="EditMode" OnRemove="GetOnRemoveCallback(task)" />
            }
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.body1">@Localize["Activity.Dialog.Tasks.Empty"]</MudText>
    }
</div>

@code {
    [Parameter]
    public Activity Activity { get; set; } = null!;

    [Parameter]
    public bool EditMode { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private IEnumerable<ITask> _tasks = null!;

    protected override void OnInitialized()
    {
        TasksChanged();
    }

    private void TasksChanged()
    {
        _tasks = Activity.GetTasks();        
    }

    private EventCallback GetOnRemoveCallback(ITask task)
    {
        return EventCallback.Factory.Create(this, () =>
        {
            Activity.RemoveTask(task);
            TasksChanged();
        });
    }
}
