@using ActivityLauncher.Client.Pages.Activities.Atoms;
@using ActivityLauncher.Client.Pages.Activities.Molecules;

@inject IStringLocalizer<ActivityLocales> Localize

<div class="@Class">
    <MudStack Class="mb-8" Row Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h5">@Localize["Activity.Dialog.Tasks.Title"]</MudText>
        @if (EditMode)
        {
            <AddTaskButton Activity="Activity" OnChange="TasksChanged" />
        }
    </MudStack>

    @if (_tasks.Any())
    {
        <MudStack Row>
            <MudPaper Width="350px">
                <MudList Clickable Color="Color.Primary" @bind-SelectedValue="_currentTaskId">
                    <MudListSubheader>@Localize["Activity.Dialog.Tasks.NavList.Title"]</MudListSubheader>
                    <MudListItem Text="@Localize["Activity.Dialog.Tasks.NavList.AllTasks"]" Value="default(Guid)" />
                    <MudListItem Text="@Localize["Activity.Dialog.Tasks.NavList.TasksLabel"]" InitiallyExpanded>
                        <NestedList>
                            @foreach (var task in _tasks)
                            {
                                <MudListItem @key="task.Id" Value="task.Id">
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        <TaskIcon TaskType="task.TaskType" Size="24" />
                                        <span>@task.Name</span>
                                    </MudStack>
                                </MudListItem>
                            }
                        </NestedList>
                    </MudListItem>
                </MudList>
            </MudPaper>
            <div style="flex: 1;">
                @if ((Guid)_currentTaskId == default)
                {
                    <MudStack Spacing="6">
                        @foreach (var task in _tasks)
                        {
                            <TaskCard @key="task.Id" Task="task" EditMode="EditMode" OnNameChange="TaskNameChanged" OnRemove="GetOnRemoveCallback(task)" />
                        }
                    </MudStack>
                }
                else
                {
                    var task = _tasks.First(x => x.Id == (Guid)_currentTaskId);
                    <TaskCard Task="task" EditMode="EditMode" OnNameChange="TaskNameChanged" OnRemove="GetOnRemoveCallback(task)" />
                }
            </div>
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.body1">@Localize["Activity.Dialog.Tasks.Empty"]</MudText>
    }
</div>

@code {
    [Parameter]
    public Activity Activity { get; set; } = null!;

    [Parameter]
    public bool EditMode { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private IEnumerable<ITask> _tasks = null!;

    private object _currentTaskId = default(Guid);

    protected override void OnInitialized()
    {
        TasksChanged();
    }

    private void TaskNameChanged()
    {
        StateHasChanged();
    }

    private void TasksChanged()
    {
        _tasks = Activity.GetTasks();        
    }

    private EventCallback GetOnRemoveCallback(ITask task)
    {
        return EventCallback.Factory.Create(this, () =>
        {
            Activity.RemoveTask(task);
            TasksChanged();
        });
    }
}
